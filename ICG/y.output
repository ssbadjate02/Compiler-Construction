Nonterminals useless in grammar

    constant_expr


Terminals unused in grammar

    CONST
    '%'


Rules useless in grammar

  102 constant_expr: CONST assignment


State 22 conflicts: 3 reduce/reduce
State 108 conflicts: 23 reduce/reduce
State 185 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 declaration_list: declaration_list declaration
    2                 | declaration

    3 declaration: specifier declarator_list ';'

    4 specifier: INT
    5          | CHAR
    6          | FLOAT

    7 declarator_list: declarator
    8                | declarator_list ',' declarator

    9 declarator: var '=' expr
   10           | var

   11 var: IDENTIFIER
   12    | var '[' expr ']'

   13 func_call: IDENTIFIER '(' ')'
   14          | IDENTIFIER '(' arglist ')'

   15 arglist: var
   16        | arglist ',' var

   17 expr: unary_expr1
   18     | unary_expr2
   19     | binary_expr
   20     | expr '?' expr ':' expr
   21     | '(' expr ')'
   22     | var
   23     | CONSTANT
   24     | func_call
   25     | STRING_LITERAL

   26 assignment: var '=' expr
   27           | var AND_ASSIGN expr
   28           | var OR_ASSIGN expr
   29           | var LEFT_ASSIGN expr
   30           | var RIGHT_ASSIGN expr
   31           | var MUL_ASSIGN expr
   32           | var DIV_ASSIGN expr
   33           | var MOD_ASSIGN expr
   34           | var ADD_ASSIGN expr
   35           | var SUB_ASSIGN expr
   36           | var XOR_ASSIGN expr

   37 binary_expr: expr '+' expr
   38            | expr '-' expr
   39            | expr '*' expr
   40            | expr '/' expr
   41            | expr '<' expr
   42            | expr '>' expr
   43            | expr AND_OP expr
   44            | expr OR_OP expr
   45            | expr LEFT_OP expr
   46            | expr RIGHT_OP expr
   47            | expr LE_OP expr
   48            | expr GE_OP expr
   49            | expr EQ_OP expr
   50            | expr NE_OP expr

   51 unary_expr1: INC_OP var
   52            | DEC_OP var
   53            | var INC_OP
   54            | var DEC_OP

   55 unary_expr2: '!' expr
   56            | '~' expr

   57 statement: declaration
   58          | compound_statement
   59          | expression_statement
   60          | selection_statement
   61          | iteration_statement
   62          | jump_statement
   63          | assignment ';'

   64 expression_statement: expr ';'
   65                     | ';'

   66 statement_list: statement
   67               | statement_list statement

   68 $@1: %empty

   69 $@2: %empty

   70 compound_statement: '{' $@1 declaration_statment_list $@2 '}'

   71 $@3: %empty

   72 $@4: %empty

   73 compound_statement: '{' $@3 statement_list $@4 '}'
   74                   | '{' '}'

   75 declaration_statment_list: declaration_list statement_com_list

   76 statement_com_list: %empty
   77                   | statement_list

   78 selection_statement: IF '(' expr ')' statement
   79                    | IF '(' expr ')' statement ELSE statement
   80                    | SWITCH '(' expr ')' statement

   81 iteration_statement: WHILE '(' expr ')' statement
   82                    | DO statement WHILE '(' expr ')' ';'

   83 $@5: %empty

   84 $@6: %empty

   85 $@7: %empty

   86 iteration_statement: $@5 FOR $@6 '(' declaration expression_statement expr $@7 ')' statement

   87 jump_statement: GOTO IDENTIFIER ';'
   88               | CONTINUE ';'
   89               | BREAK ';'
   90               | RETURN expression_statement

   91 function_declarator: IDENTIFIER '(' specifier_declator_list ')'
   92                    | IDENTIFIER '(' ')'

   93 specifier_declator_list: specifier_declator_list ',' specifier var
   94                        | specifier var

   95 function_definition: specifier function_declarator compound_statement
   96                    | VOID function_declarator compound_statement

   97 translation_unit: external_declaration
   98                 | translation_unit external_declaration

   99 external_declaration: INT MAIN '(' ')' compound_statement
  100                     | function_definition
  101                     | declaration


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 55
    '%' (37)
    '(' (40) 13 14 21 78 79 80 81 82 86 91 92 99
    ')' (41) 13 14 21 78 79 80 81 82 86 91 92 99
    '*' (42) 39
    '+' (43) 37
    ',' (44) 8 16 93
    '-' (45) 38
    '/' (47) 40
    ':' (58) 20
    ';' (59) 3 63 64 65 82 87 88 89
    '<' (60) 41
    '=' (61) 9 26
    '>' (62) 42
    '?' (63) 20
    '[' (91) 12
    ']' (93) 12
    '{' (123) 70 73 74
    '}' (125) 70 73 74
    '~' (126) 56
    error (256)
    IDENTIFIER <string> (258) 11 13 14 87 91 92
    CONSTANT <string> (259) 23
    STRING_LITERAL <string> (260) 25
    INC_OP (261) 51 53
    DEC_OP (262) 52 54
    LEFT_OP (263) 45
    RIGHT_OP (264) 46
    LE_OP (265) 47
    GE_OP (266) 48
    EQ_OP (267) 49
    NE_OP (268) 50
    AND_OP (269) 43
    OR_OP (270) 44
    MUL_ASSIGN (271) 31
    DIV_ASSIGN (272) 32
    MOD_ASSIGN (273) 33
    ADD_ASSIGN (274) 34
    SUB_ASSIGN (275) 35
    LEFT_ASSIGN (276) 29
    RIGHT_ASSIGN (277) 30
    AND_ASSIGN (278) 27
    XOR_ASSIGN (279) 36
    OR_ASSIGN (280) 28
    CHAR <string> (281) 5
    INT <string> (282) 4 99
    FLOAT <string> (283) 6
    CONST (284)
    VOID (285) 96
    MAIN (286) 99
    IF (287) 78 79
    ELSE (288) 79
    SWITCH (289) 80
    WHILE (290) 81 82
    DO (291) 82
    FOR (292) 86
    GOTO (293) 87
    CONTINUE (294) 88
    BREAK (295) 89
    RETURN (296) 90


Nonterminals, with rules where they appear

    $accept (62)
        on left: 0
    declaration_list <nPtr> (63)
        on left: 1 2
        on right: 1 75
    declaration <nPtr> (64)
        on left: 3
        on right: 1 2 57 86 101
    specifier <nPtr> (65)
        on left: 4 5 6
        on right: 3 93 94 95
    declarator_list <nPtr> (66)
        on left: 7 8
        on right: 3 8
    declarator <nPtr> (67)
        on left: 9 10
        on right: 7 8
    var <nPtr> (68)
        on left: 11 12
        on right: 9 10 12 15 16 22 26 27 28 29 30 31 32 33 34 35 36 51 52 53 54 93 94
    func_call <nPtr> (69)
        on left: 13 14
        on right: 24
    arglist <nPtr> (70)
        on left: 15 16
        on right: 14 16
    expr <nPtr> (71)
        on left: 17 18 19 20 21 22 23 24 25
        on right: 9 12 20 21 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 55 56 64 78 79 80 81 82 86
    assignment <nPtr> (72)
        on left: 26 27 28 29 30 31 32 33 34 35 36
        on right: 63
    binary_expr <nPtr> (73)
        on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50
        on right: 19
    unary_expr1 <nPtr> (74)
        on left: 51 52 53 54
        on right: 17
    unary_expr2 <nPtr> (75)
        on left: 55 56
        on right: 18
    statement <nPtr> (76)
        on left: 57 58 59 60 61 62 63
        on right: 66 67 78 79 80 81 82 86
    expression_statement <nPtr> (77)
        on left: 64 65
        on right: 59 86 90
    statement_list <nPtr> (78)
        on left: 66 67
        on right: 67 73 77
    compound_statement <nPtr> (79)
        on left: 70 73 74
        on right: 58 95 96 99
    $@1 (80)
        on left: 68
        on right: 70
    $@2 (81)
        on left: 69
        on right: 70
    $@3 (82)
        on left: 71
        on right: 73
    $@4 (83)
        on left: 72
        on right: 73
    declaration_statment_list <nPtr> (84)
        on left: 75
        on right: 70
    statement_com_list <nPtr> (85)
        on left: 76 77
        on right: 75
    selection_statement <nPtr> (86)
        on left: 78 79 80
        on right: 60
    iteration_statement <nPtr> (87)
        on left: 81 82 86
        on right: 61
    $@5 (88)
        on left: 83
        on right: 86
    $@6 (89)
        on left: 84
        on right: 86
    $@7 (90)
        on left: 85
        on right: 86
    jump_statement <nPtr> (91)
        on left: 87 88 89 90
        on right: 62
    function_declarator <nPtr> (92)
        on left: 91 92
        on right: 95 96
    specifier_declator_list <nPtr> (93)
        on left: 93 94
        on right: 91 93
    function_definition <nPtr> (94)
        on left: 95 96
        on right: 100
    translation_unit <nPtr> (95)
        on left: 97 98
        on right: 0 98
    external_declaration <nPtr> (96)
        on left: 99 100 101
        on right: 97 98


State 0

    0 $accept: . translation_unit $end

    CHAR   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    VOID   shift, and go to state 4

    declaration           go to state 5
    specifier             go to state 6
    function_definition   go to state 7
    translation_unit      go to state 8
    external_declaration  go to state 9


State 1

    5 specifier: CHAR .

    $default  reduce using rule 5 (specifier)


State 2

    4 specifier: INT .
   99 external_declaration: INT . MAIN '(' ')' compound_statement

    MAIN  shift, and go to state 10

    $default  reduce using rule 4 (specifier)


State 3

    6 specifier: FLOAT .

    $default  reduce using rule 6 (specifier)


State 4

   96 function_definition: VOID . function_declarator compound_statement

    IDENTIFIER  shift, and go to state 11

    function_declarator  go to state 12


State 5

  101 external_declaration: declaration .

    $default  reduce using rule 101 (external_declaration)


State 6

    3 declaration: specifier . declarator_list ';'
   95 function_definition: specifier . function_declarator compound_statement

    IDENTIFIER  shift, and go to state 13

    declarator_list      go to state 14
    declarator           go to state 15
    var                  go to state 16
    function_declarator  go to state 17


State 7

  100 external_declaration: function_definition .

    $default  reduce using rule 100 (external_declaration)


State 8

    0 $accept: translation_unit . $end
   98 translation_unit: translation_unit . external_declaration

    $end   shift, and go to state 18
    CHAR   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    VOID   shift, and go to state 4

    declaration           go to state 5
    specifier             go to state 6
    function_definition   go to state 7
    external_declaration  go to state 19


State 9

   97 translation_unit: external_declaration .

    $default  reduce using rule 97 (translation_unit)


State 10

   99 external_declaration: INT MAIN . '(' ')' compound_statement

    '('  shift, and go to state 20


State 11

   91 function_declarator: IDENTIFIER . '(' specifier_declator_list ')'
   92                    | IDENTIFIER . '(' ')'

    '('  shift, and go to state 21


State 12

   96 function_definition: VOID function_declarator . compound_statement

    '{'  shift, and go to state 22

    compound_statement  go to state 23


State 13

   11 var: IDENTIFIER .
   91 function_declarator: IDENTIFIER . '(' specifier_declator_list ')'
   92                    | IDENTIFIER . '(' ')'

    '('  shift, and go to state 21

    $default  reduce using rule 11 (var)


State 14

    3 declaration: specifier declarator_list . ';'
    8 declarator_list: declarator_list . ',' declarator

    ';'  shift, and go to state 24
    ','  shift, and go to state 25


State 15

    7 declarator_list: declarator .

    $default  reduce using rule 7 (declarator_list)


State 16

    9 declarator: var . '=' expr
   10           | var .
   12 var: var . '[' expr ']'

    '='  shift, and go to state 26
    '['  shift, and go to state 27

    $default  reduce using rule 10 (declarator)


State 17

   95 function_definition: specifier function_declarator . compound_statement

    '{'  shift, and go to state 22

    compound_statement  go to state 28


State 18

    0 $accept: translation_unit $end .

    $default  accept


State 19

   98 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 98 (translation_unit)


State 20

   99 external_declaration: INT MAIN '(' . ')' compound_statement

    ')'  shift, and go to state 29


State 21

   91 function_declarator: IDENTIFIER '(' . specifier_declator_list ')'
   92                    | IDENTIFIER '(' . ')'

    CHAR   shift, and go to state 1
    INT    shift, and go to state 30
    FLOAT  shift, and go to state 3
    ')'    shift, and go to state 31

    specifier                go to state 32
    specifier_declator_list  go to state 33


State 22

   70 compound_statement: '{' . $@1 declaration_statment_list $@2 '}'
   73                   | '{' . $@3 statement_list $@4 '}'
   74                   | '{' . '}'

    '}'  shift, and go to state 34

    CHAR      reduce using rule 68 ($@1)
    CHAR      [reduce using rule 71 ($@3)]
    INT       reduce using rule 68 ($@1)
    INT       [reduce using rule 71 ($@3)]
    FLOAT     reduce using rule 68 ($@1)
    FLOAT     [reduce using rule 71 ($@3)]
    $default  reduce using rule 71 ($@3)

    $@1  go to state 35
    $@3  go to state 36


State 23

   96 function_definition: VOID function_declarator compound_statement .

    $default  reduce using rule 96 (function_definition)


State 24

    3 declaration: specifier declarator_list ';' .

    $default  reduce using rule 3 (declaration)


State 25

    8 declarator_list: declarator_list ',' . declarator

    IDENTIFIER  shift, and go to state 37

    declarator  go to state 38
    var         go to state 16


State 26

    9 declarator: var '=' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 49
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 27

   12 var: var '[' . expr ']'

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 53
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 28

   95 function_definition: specifier function_declarator compound_statement .

    $default  reduce using rule 95 (function_definition)


State 29

   99 external_declaration: INT MAIN '(' ')' . compound_statement

    '{'  shift, and go to state 22

    compound_statement  go to state 54


State 30

    4 specifier: INT .

    $default  reduce using rule 4 (specifier)


State 31

   92 function_declarator: IDENTIFIER '(' ')' .

    $default  reduce using rule 92 (function_declarator)


State 32

   94 specifier_declator_list: specifier . var

    IDENTIFIER  shift, and go to state 37

    var  go to state 55


State 33

   91 function_declarator: IDENTIFIER '(' specifier_declator_list . ')'
   93 specifier_declator_list: specifier_declator_list . ',' specifier var

    ')'  shift, and go to state 56
    ','  shift, and go to state 57


State 34

   74 compound_statement: '{' '}' .

    $default  reduce using rule 74 (compound_statement)


State 35

   70 compound_statement: '{' $@1 . declaration_statment_list $@2 '}'

    CHAR   shift, and go to state 1
    INT    shift, and go to state 30
    FLOAT  shift, and go to state 3

    declaration_list           go to state 58
    declaration                go to state 59
    specifier                  go to state 60
    declaration_statment_list  go to state 61


State 36

   73 compound_statement: '{' $@3 . statement_list $@4 '}'

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    $default  reduce using rule 83 ($@5)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 75
    expression_statement  go to state 76
    statement_list        go to state 77
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 37

   11 var: IDENTIFIER .

    $default  reduce using rule 11 (var)


State 38

    8 declarator_list: declarator_list ',' declarator .

    $default  reduce using rule 8 (declarator_list)


State 39

   11 var: IDENTIFIER .
   13 func_call: IDENTIFIER . '(' ')'
   14          | IDENTIFIER . '(' arglist ')'

    '('  shift, and go to state 83

    $default  reduce using rule 11 (var)


State 40

   23 expr: CONSTANT .

    $default  reduce using rule 23 (expr)


State 41

   25 expr: STRING_LITERAL .

    $default  reduce using rule 25 (expr)


State 42

   51 unary_expr1: INC_OP . var

    IDENTIFIER  shift, and go to state 37

    var  go to state 84


State 43

   52 unary_expr1: DEC_OP . var

    IDENTIFIER  shift, and go to state 37

    var  go to state 85


State 44

   55 unary_expr2: '!' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 86
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 45

   56 unary_expr2: '~' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 87
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 46

   21 expr: '(' . expr ')'

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 88
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 47

   12 var: var . '[' expr ']'
   22 expr: var .
   53 unary_expr1: var . INC_OP
   54            | var . DEC_OP

    INC_OP  shift, and go to state 89
    DEC_OP  shift, and go to state 90
    '['     shift, and go to state 27

    $default  reduce using rule 22 (expr)


State 48

   24 expr: func_call .

    $default  reduce using rule 24 (expr)


State 49

    9 declarator: var '=' expr .
   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 9 (declarator)


State 50

   19 expr: binary_expr .

    $default  reduce using rule 19 (expr)


State 51

   17 expr: unary_expr1 .

    $default  reduce using rule 17 (expr)


State 52

   18 expr: unary_expr2 .

    $default  reduce using rule 18 (expr)


State 53

   12 var: var '[' expr . ']'
   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ']'       shift, and go to state 106


State 54

   99 external_declaration: INT MAIN '(' ')' compound_statement .

    $default  reduce using rule 99 (external_declaration)


State 55

   12 var: var . '[' expr ']'
   94 specifier_declator_list: specifier var .

    '['  shift, and go to state 27

    $default  reduce using rule 94 (specifier_declator_list)


State 56

   91 function_declarator: IDENTIFIER '(' specifier_declator_list ')' .

    $default  reduce using rule 91 (function_declarator)


State 57

   93 specifier_declator_list: specifier_declator_list ',' . specifier var

    CHAR   shift, and go to state 1
    INT    shift, and go to state 30
    FLOAT  shift, and go to state 3

    specifier  go to state 107


State 58

    1 declaration_list: declaration_list . declaration
   75 declaration_statment_list: declaration_list . statement_com_list

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    FOR       reduce using rule 83 ($@5)
    $default  reduce using rule 76 (statement_com_list)

    declaration           go to state 108
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 75
    expression_statement  go to state 76
    statement_list        go to state 109
    compound_statement    go to state 78
    statement_com_list    go to state 110
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 59

    2 declaration_list: declaration .

    $default  reduce using rule 2 (declaration_list)


State 60

    3 declaration: specifier . declarator_list ';'

    IDENTIFIER  shift, and go to state 37

    declarator_list  go to state 14
    declarator       go to state 15
    var              go to state 16


State 61

   70 compound_statement: '{' $@1 declaration_statment_list . $@2 '}'

    $default  reduce using rule 69 ($@2)

    $@2  go to state 111


State 62

   78 selection_statement: IF . '(' expr ')' statement
   79                    | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 112


State 63

   80 selection_statement: SWITCH . '(' expr ')' statement

    '('  shift, and go to state 113


State 64

   81 iteration_statement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 114


State 65

   82 iteration_statement: DO . statement WHILE '(' expr ')' ';'

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    $default  reduce using rule 83 ($@5)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 115
    expression_statement  go to state 76
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 66

   87 jump_statement: GOTO . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 116


State 67

   88 jump_statement: CONTINUE . ';'

    ';'  shift, and go to state 117


State 68

   89 jump_statement: BREAK . ';'

    ';'  shift, and go to state 118


State 69

   90 jump_statement: RETURN . expression_statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    ';'             shift, and go to state 70

    var                   go to state 47
    func_call             go to state 48
    expr                  go to state 73
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    expression_statement  go to state 119


State 70

   65 expression_statement: ';' .

    $default  reduce using rule 65 (expression_statement)


State 71

   57 statement: declaration .

    $default  reduce using rule 57 (statement)


State 72

   12 var: var . '[' expr ']'
   22 expr: var .
   26 assignment: var . '=' expr
   27           | var . AND_ASSIGN expr
   28           | var . OR_ASSIGN expr
   29           | var . LEFT_ASSIGN expr
   30           | var . RIGHT_ASSIGN expr
   31           | var . MUL_ASSIGN expr
   32           | var . DIV_ASSIGN expr
   33           | var . MOD_ASSIGN expr
   34           | var . ADD_ASSIGN expr
   35           | var . SUB_ASSIGN expr
   36           | var . XOR_ASSIGN expr
   53 unary_expr1: var . INC_OP
   54            | var . DEC_OP

    INC_OP        shift, and go to state 89
    DEC_OP        shift, and go to state 90
    MUL_ASSIGN    shift, and go to state 120
    DIV_ASSIGN    shift, and go to state 121
    MOD_ASSIGN    shift, and go to state 122
    ADD_ASSIGN    shift, and go to state 123
    SUB_ASSIGN    shift, and go to state 124
    LEFT_ASSIGN   shift, and go to state 125
    RIGHT_ASSIGN  shift, and go to state 126
    AND_ASSIGN    shift, and go to state 127
    XOR_ASSIGN    shift, and go to state 128
    OR_ASSIGN     shift, and go to state 129
    '='           shift, and go to state 130
    '['           shift, and go to state 27

    $default  reduce using rule 22 (expr)


State 73

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   64 expression_statement: expr . ';'

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ';'       shift, and go to state 131


State 74

   63 statement: assignment . ';'

    ';'  shift, and go to state 132


State 75

   66 statement_list: statement .

    $default  reduce using rule 66 (statement_list)


State 76

   59 statement: expression_statement .

    $default  reduce using rule 59 (statement)


State 77

   67 statement_list: statement_list . statement
   73 compound_statement: '{' $@3 statement_list . $@4 '}'

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    FOR       reduce using rule 83 ($@5)
    $default  reduce using rule 72 ($@4)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 133
    expression_statement  go to state 76
    compound_statement    go to state 78
    $@4                   go to state 134
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 78

   58 statement: compound_statement .

    $default  reduce using rule 58 (statement)


State 79

   60 statement: selection_statement .

    $default  reduce using rule 60 (statement)


State 80

   61 statement: iteration_statement .

    $default  reduce using rule 61 (statement)


State 81

   86 iteration_statement: $@5 . FOR $@6 '(' declaration expression_statement expr $@7 ')' statement

    FOR  shift, and go to state 135


State 82

   62 statement: jump_statement .

    $default  reduce using rule 62 (statement)


State 83

   13 func_call: IDENTIFIER '(' . ')'
   14          | IDENTIFIER '(' . arglist ')'

    IDENTIFIER  shift, and go to state 37
    ')'         shift, and go to state 136

    var      go to state 137
    arglist  go to state 138


State 84

   12 var: var . '[' expr ']'
   51 unary_expr1: INC_OP var .

    '['  shift, and go to state 27

    $default  reduce using rule 51 (unary_expr1)


State 85

   12 var: var . '[' expr ']'
   52 unary_expr1: DEC_OP var .

    '['  shift, and go to state 27

    $default  reduce using rule 52 (unary_expr1)


State 86

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   55 unary_expr2: '!' expr .

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '?'       shift, and go to state 105

    $default  reduce using rule 55 (unary_expr2)


State 87

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   56 unary_expr2: '~' expr .

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '?'       shift, and go to state 105

    $default  reduce using rule 56 (unary_expr2)


State 88

   20 expr: expr . '?' expr ':' expr
   21     | '(' expr . ')'
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ')'       shift, and go to state 139


State 89

   53 unary_expr1: var INC_OP .

    $default  reduce using rule 53 (unary_expr1)


State 90

   54 unary_expr1: var DEC_OP .

    $default  reduce using rule 54 (unary_expr1)


State 91

   45 binary_expr: expr LEFT_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 140
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 92

   46 binary_expr: expr RIGHT_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 141
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 93

   47 binary_expr: expr LE_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 142
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 94

   48 binary_expr: expr GE_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 143
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 95

   49 binary_expr: expr EQ_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 144
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 96

   50 binary_expr: expr NE_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 145
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 97

   43 binary_expr: expr AND_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 146
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 98

   44 binary_expr: expr OR_OP . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 147
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 99

   41 binary_expr: expr '<' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 148
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 100

   42 binary_expr: expr '>' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 149
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 101

   37 binary_expr: expr '+' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 150
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 102

   38 binary_expr: expr '-' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 151
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 103

   39 binary_expr: expr '*' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 152
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 104

   40 binary_expr: expr '/' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 153
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 105

   20 expr: expr '?' . expr ':' expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 154
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 106

   12 var: var '[' expr ']' .

    $default  reduce using rule 12 (var)


State 107

   93 specifier_declator_list: specifier_declator_list ',' specifier . var

    IDENTIFIER  shift, and go to state 37

    var  go to state 155


State 108

    1 declaration_list: declaration_list declaration .
   57 statement: declaration .

    IDENTIFIER      reduce using rule 1 (declaration_list)
    IDENTIFIER      [reduce using rule 57 (statement)]
    CONSTANT        reduce using rule 1 (declaration_list)
    CONSTANT        [reduce using rule 57 (statement)]
    STRING_LITERAL  reduce using rule 1 (declaration_list)
    STRING_LITERAL  [reduce using rule 57 (statement)]
    INC_OP          reduce using rule 1 (declaration_list)
    INC_OP          [reduce using rule 57 (statement)]
    DEC_OP          reduce using rule 1 (declaration_list)
    DEC_OP          [reduce using rule 57 (statement)]
    CHAR            reduce using rule 1 (declaration_list)
    CHAR            [reduce using rule 57 (statement)]
    INT             reduce using rule 1 (declaration_list)
    INT             [reduce using rule 57 (statement)]
    FLOAT           reduce using rule 1 (declaration_list)
    FLOAT           [reduce using rule 57 (statement)]
    IF              reduce using rule 1 (declaration_list)
    IF              [reduce using rule 57 (statement)]
    SWITCH          reduce using rule 1 (declaration_list)
    SWITCH          [reduce using rule 57 (statement)]
    WHILE           reduce using rule 1 (declaration_list)
    WHILE           [reduce using rule 57 (statement)]
    DO              reduce using rule 1 (declaration_list)
    DO              [reduce using rule 57 (statement)]
    FOR             reduce using rule 1 (declaration_list)
    FOR             [reduce using rule 57 (statement)]
    GOTO            reduce using rule 1 (declaration_list)
    GOTO            [reduce using rule 57 (statement)]
    CONTINUE        reduce using rule 1 (declaration_list)
    CONTINUE        [reduce using rule 57 (statement)]
    BREAK           reduce using rule 1 (declaration_list)
    BREAK           [reduce using rule 57 (statement)]
    RETURN          reduce using rule 1 (declaration_list)
    RETURN          [reduce using rule 57 (statement)]
    '!'             reduce using rule 1 (declaration_list)
    '!'             [reduce using rule 57 (statement)]
    '~'             reduce using rule 1 (declaration_list)
    '~'             [reduce using rule 57 (statement)]
    '('             reduce using rule 1 (declaration_list)
    '('             [reduce using rule 57 (statement)]
    '{'             reduce using rule 1 (declaration_list)
    '{'             [reduce using rule 57 (statement)]
    '}'             reduce using rule 1 (declaration_list)
    '}'             [reduce using rule 57 (statement)]
    ';'             reduce using rule 1 (declaration_list)
    ';'             [reduce using rule 57 (statement)]
    $default        reduce using rule 1 (declaration_list)


State 109

   67 statement_list: statement_list . statement
   77 statement_com_list: statement_list .

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    FOR       reduce using rule 83 ($@5)
    $default  reduce using rule 77 (statement_com_list)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 133
    expression_statement  go to state 76
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 110

   75 declaration_statment_list: declaration_list statement_com_list .

    $default  reduce using rule 75 (declaration_statment_list)


State 111

   70 compound_statement: '{' $@1 declaration_statment_list $@2 . '}'

    '}'  shift, and go to state 156


State 112

   78 selection_statement: IF '(' . expr ')' statement
   79                    | IF '(' . expr ')' statement ELSE statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 157
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 113

   80 selection_statement: SWITCH '(' . expr ')' statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 158
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 114

   81 iteration_statement: WHILE '(' . expr ')' statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 159
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 115

   82 iteration_statement: DO statement . WHILE '(' expr ')' ';'

    WHILE  shift, and go to state 160


State 116

   87 jump_statement: GOTO IDENTIFIER . ';'

    ';'  shift, and go to state 161


State 117

   88 jump_statement: CONTINUE ';' .

    $default  reduce using rule 88 (jump_statement)


State 118

   89 jump_statement: BREAK ';' .

    $default  reduce using rule 89 (jump_statement)


State 119

   90 jump_statement: RETURN expression_statement .

    $default  reduce using rule 90 (jump_statement)


State 120

   31 assignment: var MUL_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 162
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 121

   32 assignment: var DIV_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 163
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 122

   33 assignment: var MOD_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 164
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 123

   34 assignment: var ADD_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 165
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 124

   35 assignment: var SUB_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 166
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 125

   29 assignment: var LEFT_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 167
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 126

   30 assignment: var RIGHT_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 168
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 127

   27 assignment: var AND_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 169
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 128

   36 assignment: var XOR_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 170
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 129

   28 assignment: var OR_ASSIGN . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 171
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 130

   26 assignment: var '=' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 172
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 131

   64 expression_statement: expr ';' .

    $default  reduce using rule 64 (expression_statement)


State 132

   63 statement: assignment ';' .

    $default  reduce using rule 63 (statement)


State 133

   67 statement_list: statement_list statement .

    $default  reduce using rule 67 (statement_list)


State 134

   73 compound_statement: '{' $@3 statement_list $@4 . '}'

    '}'  shift, and go to state 173


State 135

   86 iteration_statement: $@5 FOR . $@6 '(' declaration expression_statement expr $@7 ')' statement

    $default  reduce using rule 84 ($@6)

    $@6  go to state 174


State 136

   13 func_call: IDENTIFIER '(' ')' .

    $default  reduce using rule 13 (func_call)


State 137

   12 var: var . '[' expr ']'
   15 arglist: var .

    '['  shift, and go to state 27

    $default  reduce using rule 15 (arglist)


State 138

   14 func_call: IDENTIFIER '(' arglist . ')'
   16 arglist: arglist . ',' var

    ')'  shift, and go to state 175
    ','  shift, and go to state 176


State 139

   21 expr: '(' expr ')' .

    $default  reduce using rule 21 (expr)


State 140

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   45            | expr LEFT_OP expr .
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    '?'  shift, and go to state 105

    $default  reduce using rule 45 (binary_expr)


State 141

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   46            | expr RIGHT_OP expr .
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    '?'  shift, and go to state 105

    $default  reduce using rule 46 (binary_expr)


State 142

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   47            | expr LE_OP expr .
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 47 (binary_expr)


State 143

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   48            | expr GE_OP expr .
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 48 (binary_expr)


State 144

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   49            | expr EQ_OP expr .
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 49 (binary_expr)


State 145

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   50            | expr NE_OP expr .

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 50 (binary_expr)


State 146

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   43            | expr AND_OP expr .
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 43 (binary_expr)


State 147

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   44            | expr OR_OP expr .
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 44 (binary_expr)


State 148

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   41            | expr '<' expr .
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 41 (binary_expr)


State 149

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   42            | expr '>' expr .
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 42 (binary_expr)


State 150

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   37            | expr '+' expr .
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 37 (binary_expr)


State 151

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   38            | expr '-' expr .
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 38 (binary_expr)


State 152

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   39            | expr '*' expr .
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '?'       shift, and go to state 105

    $default  reduce using rule 39 (binary_expr)


State 153

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   40            | expr '/' expr .
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    '?'       shift, and go to state 105

    $default  reduce using rule 40 (binary_expr)


State 154

   20 expr: expr . '?' expr ':' expr
   20     | expr '?' expr . ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ':'       shift, and go to state 177


State 155

   12 var: var . '[' expr ']'
   93 specifier_declator_list: specifier_declator_list ',' specifier var .

    '['  shift, and go to state 27

    $default  reduce using rule 93 (specifier_declator_list)


State 156

   70 compound_statement: '{' $@1 declaration_statment_list $@2 '}' .

    $default  reduce using rule 70 (compound_statement)


State 157

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   78 selection_statement: IF '(' expr . ')' statement
   79                    | IF '(' expr . ')' statement ELSE statement

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ')'       shift, and go to state 178


State 158

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   80 selection_statement: SWITCH '(' expr . ')' statement

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ')'       shift, and go to state 179


State 159

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   81 iteration_statement: WHILE '(' expr . ')' statement

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ')'       shift, and go to state 180


State 160

   82 iteration_statement: DO statement WHILE . '(' expr ')' ';'

    '('  shift, and go to state 181


State 161

   87 jump_statement: GOTO IDENTIFIER ';' .

    $default  reduce using rule 87 (jump_statement)


State 162

   20 expr: expr . '?' expr ':' expr
   31 assignment: var MUL_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 31 (assignment)


State 163

   20 expr: expr . '?' expr ':' expr
   32 assignment: var DIV_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 32 (assignment)


State 164

   20 expr: expr . '?' expr ':' expr
   33 assignment: var MOD_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 33 (assignment)


State 165

   20 expr: expr . '?' expr ':' expr
   34 assignment: var ADD_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 34 (assignment)


State 166

   20 expr: expr . '?' expr ':' expr
   35 assignment: var SUB_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 35 (assignment)


State 167

   20 expr: expr . '?' expr ':' expr
   29 assignment: var LEFT_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 29 (assignment)


State 168

   20 expr: expr . '?' expr ':' expr
   30 assignment: var RIGHT_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 30 (assignment)


State 169

   20 expr: expr . '?' expr ':' expr
   27 assignment: var AND_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 27 (assignment)


State 170

   20 expr: expr . '?' expr ':' expr
   36 assignment: var XOR_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 36 (assignment)


State 171

   20 expr: expr . '?' expr ':' expr
   28 assignment: var OR_ASSIGN expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 28 (assignment)


State 172

   20 expr: expr . '?' expr ':' expr
   26 assignment: var '=' expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 26 (assignment)


State 173

   73 compound_statement: '{' $@3 statement_list $@4 '}' .

    $default  reduce using rule 73 (compound_statement)


State 174

   86 iteration_statement: $@5 FOR $@6 . '(' declaration expression_statement expr $@7 ')' statement

    '('  shift, and go to state 182


State 175

   14 func_call: IDENTIFIER '(' arglist ')' .

    $default  reduce using rule 14 (func_call)


State 176

   16 arglist: arglist ',' . var

    IDENTIFIER  shift, and go to state 37

    var  go to state 183


State 177

   20 expr: expr '?' expr ':' . expr

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 184
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 178

   78 selection_statement: IF '(' expr ')' . statement
   79                    | IF '(' expr ')' . statement ELSE statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    $default  reduce using rule 83 ($@5)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 185
    expression_statement  go to state 76
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 179

   80 selection_statement: SWITCH '(' expr ')' . statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    $default  reduce using rule 83 ($@5)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 186
    expression_statement  go to state 76
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 180

   81 iteration_statement: WHILE '(' expr ')' . statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    $default  reduce using rule 83 ($@5)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 187
    expression_statement  go to state 76
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 181

   82 iteration_statement: DO statement WHILE '(' . expr ')' ';'

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 188
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 182

   86 iteration_statement: $@5 FOR $@6 '(' . declaration expression_statement expr $@7 ')' statement

    CHAR   shift, and go to state 1
    INT    shift, and go to state 30
    FLOAT  shift, and go to state 3

    declaration  go to state 189
    specifier    go to state 60


State 183

   12 var: var . '[' expr ']'
   16 arglist: arglist ',' var .

    '['  shift, and go to state 27

    $default  reduce using rule 16 (arglist)


State 184

   20 expr: expr . '?' expr ':' expr
   20     | expr '?' expr ':' expr .
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr

    $default  reduce using rule 20 (expr)


State 185

   78 selection_statement: IF '(' expr ')' statement .
   79                    | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 190

    ELSE      [reduce using rule 78 (selection_statement)]
    $default  reduce using rule 78 (selection_statement)


State 186

   80 selection_statement: SWITCH '(' expr ')' statement .

    $default  reduce using rule 80 (selection_statement)


State 187

   81 iteration_statement: WHILE '(' expr ')' statement .

    $default  reduce using rule 81 (iteration_statement)


State 188

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   82 iteration_statement: DO statement WHILE '(' expr . ')' ';'

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105
    ')'       shift, and go to state 191


State 189

   86 iteration_statement: $@5 FOR $@6 '(' declaration . expression_statement expr $@7 ')' statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    ';'             shift, and go to state 70

    var                   go to state 47
    func_call             go to state 48
    expr                  go to state 73
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    expression_statement  go to state 192


State 190

   79 selection_statement: IF '(' expr ')' statement ELSE . statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    $default  reduce using rule 83 ($@5)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 193
    expression_statement  go to state 76
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 191

   82 iteration_statement: DO statement WHILE '(' expr ')' . ';'

    ';'  shift, and go to state 194


State 192

   86 iteration_statement: $@5 FOR $@6 '(' declaration expression_statement . expr $@7 ')' statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46

    var          go to state 47
    func_call    go to state 48
    expr         go to state 195
    binary_expr  go to state 50
    unary_expr1  go to state 51
    unary_expr2  go to state 52


State 193

   79 selection_statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 79 (selection_statement)


State 194

   82 iteration_statement: DO statement WHILE '(' expr ')' ';' .

    $default  reduce using rule 82 (iteration_statement)


State 195

   20 expr: expr . '?' expr ':' expr
   37 binary_expr: expr . '+' expr
   38            | expr . '-' expr
   39            | expr . '*' expr
   40            | expr . '/' expr
   41            | expr . '<' expr
   42            | expr . '>' expr
   43            | expr . AND_OP expr
   44            | expr . OR_OP expr
   45            | expr . LEFT_OP expr
   46            | expr . RIGHT_OP expr
   47            | expr . LE_OP expr
   48            | expr . GE_OP expr
   49            | expr . EQ_OP expr
   50            | expr . NE_OP expr
   86 iteration_statement: $@5 FOR $@6 '(' declaration expression_statement expr . $@7 ')' statement

    LEFT_OP   shift, and go to state 91
    RIGHT_OP  shift, and go to state 92
    LE_OP     shift, and go to state 93
    GE_OP     shift, and go to state 94
    EQ_OP     shift, and go to state 95
    NE_OP     shift, and go to state 96
    AND_OP    shift, and go to state 97
    OR_OP     shift, and go to state 98
    '<'       shift, and go to state 99
    '>'       shift, and go to state 100
    '+'       shift, and go to state 101
    '-'       shift, and go to state 102
    '*'       shift, and go to state 103
    '/'       shift, and go to state 104
    '?'       shift, and go to state 105

    $default  reduce using rule 85 ($@7)

    $@7  go to state 196


State 196

   86 iteration_statement: $@5 FOR $@6 '(' declaration expression_statement expr $@7 . ')' statement

    ')'  shift, and go to state 197


State 197

   86 iteration_statement: $@5 FOR $@6 '(' declaration expression_statement expr $@7 ')' . statement

    IDENTIFIER      shift, and go to state 39
    CONSTANT        shift, and go to state 40
    STRING_LITERAL  shift, and go to state 41
    INC_OP          shift, and go to state 42
    DEC_OP          shift, and go to state 43
    CHAR            shift, and go to state 1
    INT             shift, and go to state 30
    FLOAT           shift, and go to state 3
    IF              shift, and go to state 62
    SWITCH          shift, and go to state 63
    WHILE           shift, and go to state 64
    DO              shift, and go to state 65
    GOTO            shift, and go to state 66
    CONTINUE        shift, and go to state 67
    BREAK           shift, and go to state 68
    RETURN          shift, and go to state 69
    '!'             shift, and go to state 44
    '~'             shift, and go to state 45
    '('             shift, and go to state 46
    '{'             shift, and go to state 22
    ';'             shift, and go to state 70

    $default  reduce using rule 83 ($@5)

    declaration           go to state 71
    specifier             go to state 60
    var                   go to state 72
    func_call             go to state 48
    expr                  go to state 73
    assignment            go to state 74
    binary_expr           go to state 50
    unary_expr1           go to state 51
    unary_expr2           go to state 52
    statement             go to state 198
    expression_statement  go to state 76
    compound_statement    go to state 78
    selection_statement   go to state 79
    iteration_statement   go to state 80
    $@5                   go to state 81
    jump_statement        go to state 82


State 198

   86 iteration_statement: $@5 FOR $@6 '(' declaration expression_statement expr $@7 ')' statement .

    $default  reduce using rule 86 (iteration_statement)
